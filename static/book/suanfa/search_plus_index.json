{"./":{"url":"./","title":"前言","keywords":"","body":"数据结构与算法笔记 作者: Landers 欢迎访问我的主页 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-08-20 "},"ch1/":{"url":"ch1/","title":"第一章 数据结构","keywords":"","body":"第一章 数据结构 数据定义 数据类型 算法 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-07-02 "},"ch1/c1.html":{"url":"ch1/c1.html","title":"第1节：数据","keywords":"","body":"数据 概念 数据：计算机中可以输入的被计算机处理的符号的总称 数据元素：数据的基本单位，有时数据元素可以是若干个数据项组成的，数据项是数据不可分割的最小单位 数据对象：性质相同的数据元素的集合，是数据的一个子集，例如整数对象，字符串对象 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合，数据元素之间的关系称为结构。 一般有四类基本结构：集合，线性结构，树形结构，网状结构或图状结构 例：定义一个简单的数据结构 Group = (P,R) P表示全部的数据元素，R表示数据元素之间的关系，是结构 在结构中定义的数据关系实际上是数据元素之间的逻辑关系，所以又称为逻辑结构 数据结构在计算机的表示中，又称为是数据的物理结构，称为存储结构 计算机映像关系 计算机中表示数据的最小位称为bit，由若干个bit位构成一个位串，称为数据元素。通常在计算机中其称为元素或结点。 位串中的子位串称为是数据项，所以元素和结点可以看作数据元素在计算机中的映像 关系表示方式 顺序映像，非顺序映像 由此得到两种结构：顺序存储结构，链式存储结构 顺序结构：利用数据在存储器中的相对位置表示数据元素之间的逻辑关系 非顺序结构：利用指向元素存储地址的指针表示数据元素之间的逻辑关系 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-07-02 "},"ch1/c2.html":{"url":"ch1/c2.html","title":"第2节：数据类型","keywords":"","body":"抽象数据类型 数据类型 按照值来分类：非结构的原子类型，结构类型 原子类型：例如c的基本类型，整型，字符，指针，空类型等其值是不可分割的 结构类型：例如一个结构体，是由若干成分按照某种结构组合成的，组成的成分可以是原子型也可以是结构型 抽象数据类型 指一个数学模型以及定义在该模型上的一组操作。抽象数据的定义仅仅决定于它的一组逻辑特性而和它在计算机里如何表示和实现无关。也就是说不论其内部结构如何变化只要其数学特性不变，就不影响外部的使用 按照值的特性分类 原子类型 即原子类型变量的值是不能分解的 固定聚合类型 其值友确定数目的成分按照某种结构组成，如复数 可变聚合类型 构成其值的成分数目不确定，比如一个有序的整数序列 构成 （D,S,P）分别是数据对象，关系集合，操作集合 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-07-04 "},"ch1/c3.html":{"url":"ch1/c3.html","title":"第3节：算法","keywords":"","body":"算法 算法重要的五个特性 有穷性 一个算法总是在有穷的步骤后结束，并且每一步都是在有穷的时间内完成 确定性 算法中的每一条指令都有确切的意义，即对于相同的输入只能得到相同的输出 可行性 算法所描述的操作都是可以通过已经实现的基本运算执行有限次来实现的 输入 一个算法一定有输入 输出 一个算法一定有输出 通常需要考虑 正确性 算法应该能正确解决问题 可读性 算法应该有良好的可读性 健壮性 输入非法数据时，算法应该可以进行处理而不会输出不正常的结果 效率与低存储需求 效率指运行时间，存储量指算法执行过程中所需的最大存储空间 算法效率度量 时间复杂度 一般用基本运算的频度f(n)表示，T(n)=O(f(n))，O表示T的数量级 一般考虑最坏时间复杂度作为时间复杂度 运算法则 加法 T(n)=T1(n)+T2(n)=O(f(n)+g(n))=O(max(f,g)) 乘法 T(n)=T1(n)xT2(n)=O(f(n)xg(n)) 常见的时间复杂度 o(1) 空间复杂度 算法消耗的存储空间，记为S(n)=O(g(n)) 算法原地工作指算法所需要的辅助空间为常量(注意不是不需要)，即O(1) 注意 fn中如果有多项式，取次数最高的次数作为时间复杂度 一个算法，实现它的语言级别越高，执行效率就越低 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-08-15 "},"ch2/":{"url":"ch2/","title":"第二章 线性表","keywords":"","body":"第二章 线性表 顺序表 单链表 循环链表 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-08-20 "},"ch2/c1.html":{"url":"ch2/c1.html","title":"顺序表","keywords":"","body":"线性表定义 具有相同数据类型的n个数据元素的有限序列，n为0时为空表 表示为L=(a1,a2,..an) 线性表分为顺序存储和链式存储 a1唯一且称为表头元素，an唯一称为表尾元素，除了第一个元素外每一个元素都有且仅有一个直接前驱，除最后一个元素外每个元素有且只有一个直接后继，这就是线性表的逻辑结构 特点：元素在逻辑上有顺序性，表中的元素都是数据元素，数据类型相同即占用的存储空间相同，表中的元素具有抽象性，即仅讨论其逻辑关系不考虑元素的具体内容。 线性表是一种存储结构表示元素的相邻关系，而顺序表和链表是存储结构的不同，不是同一层面 线性表的顺序表示-顺序表 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-08-20 "},"ch2/c2.html":{"url":"ch2/c2.html","title":"单链表","keywords":"","body":"单链表 定义 不同于顺序表，单链表是链式存储，即不使用地址连续的存储空间。 逻辑相邻而物理不需要相邻，其逻辑关系由指针建立，只需要修改指针即可完成元素的插入修改 每个链表结点除了存储元素信息还要存储一个指向后继的指针 data next 数据域 指针域 因为在单链表中数据存储不是连续的，所以它是非随机存取的，不能直接找到某个结点必须对表进行遍历。 通常用头指针标识一个单链表，头指针为null时表示一个空链表。为操作方便在第一个结点的前面添加一个头结点，头结点的指针域指向线性表的第一个元素结点。 如下约定： 不管是否设置头结点，头指针都指向链表的第一个结点，带有头结点时，头结点是第一个结点 操作 头插法建立单链表 每次的新结点插入到表头 时间复杂度On,插入数据的顺序和最终生成的链表的顺序是相反的 尾插法 每次插入到链表的表尾，为此需要设置一个尾指针r，始终指向当前链表的尾结点 时间复杂度On 序号查找 对表遍历，时间复杂度On 按值查找 对表遍历，若值==查找值返回，时间复杂度On 插入结点操作 Copyright© Landers all right reserved，powered by Landers1037更新于 2019-08-20 "}}